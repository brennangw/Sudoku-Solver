
First Thoughts:
To make this as easy as possible I will take a non object oriented approach to solving this problem. Essentially the puzzle will be laid out as double array. Essentially the program will make continuous passes throughout the array (if you take each fill in on case by case basis and try to account for the effects the cascading change would quickly become very messy) in which it will check the possible and not possible numbers. 

Primary Algorithm:
	First pass through all squares identify all numbers possible and not.

	Primary Loop
		Passing through every square.
			For each square check what is possible and what is not.
				For each possible check if that the squares in the currents square's row, column, and box that could be that possible number.
						If no others in one of those subsets could be that number.
							Solve the square for that number.
						If not move on to the next square.
				If there is only one possible number solve that square for the number.
				
				
Object Structure:
	It seems this can be kept largely procedural. Because information is constantly changing and I don't want to account for the cascading effects of solving one number it seems like keeping track of old possibilities would not be as useful as just getting the information again and again though admittedly this would be much slower.


Issue Points: 

Defining the 3 x 3 boxes:

	Which Block Algorithm:
		Problem:
			Given array (this is very important as we start to count at zero for the array) coordinates x,y identity the block.
		Algorithm:
			Divide each coordinate by 3 (truncating).
			Examples/Semi-Proof:
				square (3,8) => block (1,2)
				square (0,0) => block (0,2)
			This gives the block "coordinates". Diagram below demonstrates how the block coordinates work. Each block has 9 squares.
			+-----+-----+-----+
			| 0,0 | 0,1 | 0,2 |
			+-----+-----+-----+
			| 1,0 | 2,1 | 3,2 |
			+-----+-----+-----+
			| 2,0 | 2,1 | 3,2 |
			+-----+-----+-----+

	Squares in the block algorithm:
		Problem:
			Given a block number (1 - 9) return the coordinates of all the squares in the block.
		Algorithm:
			Take x each coordinate add three and take that number plus the next to increments.
			Then do the same for each y coordinate.
			Then find all 9 combos.